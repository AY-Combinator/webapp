generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String?
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  walletAddress String?  @map("wallet_address")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  projects Project[]

  @@map("users")
}

model Project {
  id               String   @id @default(uuid())
  title            String?
  featuredImage    String?  @map("featured_image")
  shortDescription String?  @map("short_description")
  longDescription  String?  @map("long_description")
  tags             String[]
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  ProjectProgress ProjectProgress[]

  @@map("projects")
}

model Chapter {
  id    String @id @default(uuid())
  name  String
  order Int    @unique

  modules Module[]

  @@map("chapters")
}

model Module {
  id          String           @id @default(uuid())
  name        String
  description String?
  difficulty  ModuleDifficulty
  maxScore    Int
  order       Int              @unique
  chapter     Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String

  prerequisites   ModulePrerequisite[] @relation("ModulePrerequisites")
  requiredModules ModulePrerequisite[] @relation("ModulePrerequisiteModule")
  ProjectProgress ProjectProgress[]
}

enum ModuleDifficulty {
  Beginner
  Intermediate
  Advanced
}

model ModulePrerequisite {
  module             Module @relation("ModulePrerequisites", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId           String
  prerequisiteId     String
  prerequisiteModule Module @relation("ModulePrerequisiteModule", fields: [prerequisiteId], references: [id])

  @@unique([moduleId, prerequisiteId])
  @@map("module_prerequisites")
}

model ProjectProgress {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String
  score     Int     @default(0)
  completed Boolean @default(false)

  @@unique([projectId, moduleId])
  @@map("project_progress")
}
